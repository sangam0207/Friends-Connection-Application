import { SentienceSDK, SentienceSDKOptions, RPCMethodCache, SDKProvider, ServiceStatus } from '@sntns/sdk';
import { EthereumRpcError } from 'eth-rpc-errors';
import React from 'react';
export interface EventHandlerProps {
    setConnecting: React.Dispatch<React.SetStateAction<boolean>>;
    setConnected: React.Dispatch<React.SetStateAction<boolean>>;
    setChainId: React.Dispatch<React.SetStateAction<string | undefined>>;
    setError: React.Dispatch<React.SetStateAction<EthereumRpcError<unknown> | undefined>>;
    setAccount: React.Dispatch<React.SetStateAction<string | undefined>>;
    setStatus: React.Dispatch<React.SetStateAction<ServiceStatus | undefined>>;
    setTrigger: React.Dispatch<React.SetStateAction<number>>;
    setRPCHistory: React.Dispatch<React.SetStateAction<RPCMethodCache>>;
    debug?: boolean;
    synced?: boolean;
    chainId?: string;
    activeProvider?: SDKProvider;
    sdk?: SentienceSDK;
}
export interface SDKState {
    sdk?: SentienceSDK;
    ready: boolean;
    connected: boolean;
    connecting: boolean;
    extensionActive: boolean;
    readOnlyCalls: boolean;
    provider?: SDKProvider;
    channelId?: string;
    error?: EthereumRpcError<unknown>;
    chainId?: string;
    balance?: string;
    balanceProcessing?: boolean;
    account?: string;
    status?: ServiceStatus;
    rpcHistory?: RPCMethodCache;
    syncing?: boolean;
}
export declare const SDKContext: React.Context<SDKState>;
export declare const SentienceProvider: ({ children, sdkOptions, debug, }: {
    children: React.ReactNode;
    sdkOptions: SentienceSDKOptions;
    debug?: boolean;
}) => React.JSX.Element;
export default SentienceProvider;
//# sourceMappingURL=MetaMaskProvider.d.ts.map